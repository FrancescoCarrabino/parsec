# backend/app/api/v1/websocket.py
import json
import asyncio
from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends
from typing import List, Dict, Any
from loguru import logger

# --- MODIFIED IMPORTS ---
# We now only need our two core services. All agent logic is handled within the AgentService.
from ...services.workspace_service import WorkspaceService
from ...services.agent_service import AgentService

from .dependencies import get_workspace_service, get_agent_service

router = APIRouter()

class ConnectionManager:
    def __init__(self): self.active_connections: List[WebSocket] = []
    async def connect(self, websocket: WebSocket): await websocket.accept(); self.active_connections.append(websocket)
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections: self.active_connections.remove(websocket)
    async def broadcast(self, message: str):
        if not self.active_connections: return
        # Await gather in a variable to handle results/exceptions properly
        results = await asyncio.gather(*(conn.send_text(message) for conn in self.active_connections), return_exceptions=True)
        for res in results:
            if isinstance(res, Exception): logger.warning(f"Failed to send message to a client: {res}")

manager = ConnectionManager()


@router.websocket("/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    workspace: WorkspaceService = Depends(get_workspace_service),
    agent_service: AgentService = Depends(get_agent_service), # <-- New dependency
):
    await manager.connect(websocket)
    client_host = websocket.client.host
    client_port = websocket.client.port
    logger.info(f"Client connected: {client_host}:{client_port}")
    async def send_status_update(status: str, message: str, details: Dict[str, Any] = None):
        """A closure that captures the current websocket to send status updates."""
        logger.info(f"AGENT_STATUS -> {status}: {message}")
        payload = {
            "type": "AGENT_STATUS_UPDATE",
            "payload": {"status": status, "message": message, "details": details or {}}
        }
        await websocket.send_text(json.dumps(payload))

    try:
        # Send initial state (this part is correct and unchanged)
        initial_state = {
            "type": "SET_WORKSPACE_STATE",
            "payload": {
                "elements": workspace.get_all_elements(),
                "componentDefinitions": workspace.get_all_component_definitions(),
                "assets": workspace.get_all_assets()
            }
        }
        await websocket.send_text(json.dumps(initial_state))

        while True:
            data = await websocket.receive_text()
            message = json.loads(data)
            logger.debug(f"Received message: {message}")
            msg_type = message.get("type")
            payload = message.get("payload", {})

            # --- NEW, SIMPLIFIED AI HANDLING ---
            if msg_type == "user_prompt":
                # Delegate the entire complex task to our new, powerful AgentService.
                # It will handle the entire multi-step workflow internally.
                commands = await agent_service.process_user_prompt(
                    prompt_text=payload.get("text"),
                    selected_ids=payload.get("selected_ids", []),
                    send_status_update=send_status_update
                )
                
                # Broadcast any commands generated by the completed workflow.
                for command in commands:
                    if command:
                        await manager.broadcast(json.dumps(command))
                
                # Continue the loop, as broadcasting is handled.
                continue
            # --- END OF NEW AI HANDLING ---

            # === HISTORY COMMANDS ===
            elif msg_type == "undo":
                restored_elements = workspace.undo()
                if restored_elements is not None:
                    response = {
                        "type": "WORKSPACE_RESET",
                        "payload": {"elements": [el.model_dump() for el in restored_elements.values()]}
                    }
            elif msg_type == "redo":
                restored_elements = workspace.redo()
                if restored_elements is not None:
                    response = {
                        "type": "WORKSPACE_RESET",
                        "payload": {"elements": [el.model_dump() for el in restored_elements.values()]}
                    }

            # === ELEMENT MODIFICATION COMMANDS ===
            elif msg_type == "update_element":
                commit_history = payload.pop("commitHistory", True)
                element = workspace.update_element(payload["id"], payload, commit_history=commit_history)
                if element: response = {"type": "ELEMENT_UPDATED", "payload": element.model_dump()}
            
            elif msg_type == "create_element":
                element = workspace.create_element_from_payload(payload)
                if element: response = {"type": "ELEMENT_CREATED", "payload": element.model_dump()}
            
            elif msg_type == "create_elements_batch":
                elements = workspace.create_elements_batch(payload.get("elements", []))
                if elements: response = {"type": "ELEMENTS_UPDATED", "payload": [el.model_dump() for el in elements]}
            
            elif msg_type == "delete_element":
                deleted_ids = workspace.delete_element(payload["id"])
                for an_id in deleted_ids:
                    await manager.broadcast(json.dumps({"type": "ELEMENT_DELETED", "payload": {"id": an_id}}))
                continue
            
            # === HIERARCHY & ORDERING COMMANDS ===
            elif msg_type == "group_elements":
                elements = workspace.group_elements(payload["ids"])
                if elements: response = {"type": "ELEMENTS_UPDATED", "payload": [el.model_dump() for el in elements]}
            
            elif msg_type == "ungroup_element":
                children, deleted_ids = workspace.ungroup_elements(payload["id"])
                if children: await manager.broadcast(json.dumps({"type": "ELEMENTS_UPDATED", "payload": [el.model_dump() for el in children]}))
                for an_id in deleted_ids: await manager.broadcast(json.dumps({"type": "ELEMENT_DELETED", "payload": {"id": an_id}}))
                continue
            
            elif msg_type == "reparent_element":
                elements = workspace.reparent_element(payload["childId"], payload["newParentId"])
                if elements: response = {"type": "ELEMENTS_UPDATED", "payload": [el.model_dump() for el in elements]}
            
            elif msg_type == "reorder_element":
                elements = workspace.reorder_element(payload["id"], payload["command"])
                if elements: response = {"type": "ELEMENTS_UPDATED", "payload": [el.model_dump() for el in elements]}

            # === PRESENTATION COMMANDS ===
            elif msg_type == "update_presentation_order":
                elements = workspace.update_presentation_order(payload)
                if elements: response = {"type": "ELEMENTS_UPDATED", "payload": [el.model_dump() for el in elements]}
            
            elif msg_type == "reorder_slide":
                slides = workspace.reorder_slide(payload["dragged_id"], payload["target_id"], payload["position"])
                if slides: response = {"type": "ELEMENTS_UPDATED", "payload": [el.model_dump() for el in slides]}
            
            if response:
                await manager.broadcast(json.dumps(response))

    except WebSocketDisconnect:
        logger.info(f"Client disconnected cleanly: {client_host}:{client_port}")
    except Exception as e:
        logger.error(f"An unexpected error occurred with client {client_host}:{client_port}: {e}", exc_info=True)
    finally:
        manager.disconnect(websocket)
        logger.info(f"Connection closed and cleaned up for: {client_host}:{client_port}")