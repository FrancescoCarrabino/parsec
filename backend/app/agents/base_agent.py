# parsec-backend/app/agents/base_agent.py
from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional, Type
from loguru import logger

from .shared_tools import CommonCanvasTools

class BaseAgent(ABC):
    """
    The abstract base class for all specialist agents in the Parsec system.
    It provides a common interface and shared dependencies.
    """
    def __init__(self, agent_name: str, common_tools: CommonCanvasTools, agent_pouch: Dict[str, 'BaseAgent'] = None):
        self.agent_name = agent_name
        self.common_tools = common_tools
        # The 'agent_pouch' is a dictionary containing all other agents, allowing for delegation.
        self.agent_pouch = agent_pouch if agent_pouch is not None else {}
        logger.info(f"Agent '{self.agent_name}' initialized.")

    @abstractmethod
    async def handle_task(self, prompt: str, context: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """
        The primary entry point for an agent to handle a task.
        Each specialist agent MUST implement this method.

        Args:
            prompt: The primary text prompt describing the task.
            context: A dictionary containing any relevant data from previous steps
                     (e.g., selected element IDs, content generated by another agent).

        Returns:
            A list of command dictionaries to be broadcasted to the frontend.
        """
        pass

    def set_agent_pouch(self, agent_pouch: Dict[str, 'BaseAgent']):
        """Allows for late binding of the agent pouch after all agents are created."""
        self.agent_pouch = agent_pouch
        logger.info(f"Agent '{self.agent_name}' received its agent pouch.")